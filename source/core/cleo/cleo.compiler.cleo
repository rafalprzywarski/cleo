(ns cleo.compiler)


(def parse)


(defn- parse-const [form]
  (if (map? form)
    {:tag :const
     :value form}
    form))


(defn- parse-symbol [s]
  {:tag :var
   :name s})


(defn- parse-if [form]
  (let [form (next form)
        cond (if form
               (first form)
               (throw (CompilationError. "Too few arguments to if")))
        form (next form)
        then (if form
               (first form)
               (throw (CompilationError. "Too few arguments to if")))
        form (next form)
        else (first form)]
    (if (next form)
      (throw (CompilationError. "Too many arguments to if"))
      {:tag :if
       :cond (parse cond)
       :then (parse then)
       :else (parse else)})))


(defn- parse-do [form]
  {:tag :do
   :exprs (vec (map parse (next form)))})


(defn- parse-quote [form]
  (when (or (not (next form))
            (nnext form))
    (throw (CompilationError. (str "Wrong number of args (" (dec (count form)) ") passed to quote, form: " (pr-str form)))))
  (parse-const (second form)))


(defn- parse-call [form]
  {:tag :call,
   :fn (parse (first form))
   :args (vec (map parse (next form)))})


(defn- parse-seq [form]
  (if-let [form (seq form)]
    (let [f (first form)]
      (cond
        (= f 'if) (parse-if form)
        (= f 'do) (parse-do form)
        (= f 'quote) (parse-quote form)
        :else (parse-call form)))
    ()))


(defn parse [form]
  (cond
    (symbol? form) (parse-symbol form)
    (seq? form) (parse-seq form)
    :else (parse-const form)))
