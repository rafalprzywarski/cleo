(ns cleo.core)


(def {:arglists '([f coll] [f val coll])} reduce
  (fn* reduce
       ([f coll]
        (let* [s (seq coll)]
          (if s
            (reduce f (first coll) (next coll))
            (f))))
       ([f val coll]
        (let* [s (seq coll)]
          (if s
            (recur f (f val (first s)) (next s))
            val)))))


(def {:private :true} reverse1
  (fn* reverse1 [xs]
    (reduce conj* () xs)))


(def {:private :true} map1
  (fn* map1 [f s]
    (reverse1 (reduce (fn* [out x] (conj* out (f x))) () s))))


(def {:arglists '([x])}
  second
  (fn* second [x] (first (next x))))


(def {:arglists '([x])}
  nnext
  (fn* nnext [x] (next (next x))))


(def {:arglists '([coll])}
  rest
  (fn* [coll]
    (let* [n (next coll)]
      (if n n ()))))


(def {:private :true} partition-kv
  (fn* partition-kv [coll]
       (let* [s (seq coll)]
         (if s
           (let* [n (next s)]
             (if n
               (conj* (partition-kv (next n)) [(first s) (first n)])
               ()))
           ()))))


(def {:arglists '([] [coll] [coll x] [coll x & xs])} conj
  (fn* conj
       ([] [])
       ([coll] coll)
       ([coll x] (conj* coll x))
       ([coll x & xs]
        (if xs
          (recur (conj* coll x) (first xs) (next xs))
          (conj* coll x)))))


(def {:macro :true, :arglists '([& pairs])} cond
  (fn* cond [&form &env & pairs]
       (if pairs
         (if (next pairs)
           `(if ~(first pairs) ~(second pairs) (cond ~@(nnext pairs)))
           (throw (new IllegalArgument  "cond requires an even number of forms"))))))


(def {:arglists '([m] [m k] [m k & ks])} dissoc
  (fn* dissoc
       ([m] m)
       ([m k] (dissoc* m k))
       ([m k & ks]
        (let* [m (dissoc* m k)]
          (if ks
            (recur m (first ks) (next ks))
            m)))))


(def {:arglists '([pred coll])} every?
  (fn* [pred coll]
       (let* [s (seq coll)]
         (if s
           (if (pred (first s))
             (recur pred (next s)))
           :true))))


(def destructure
  (fn* destructure [bindings]
       (let* [pairs (partition-kv bindings)
              destructure-binding
              (fn* destructure-binding [out b v]
                   (let* [destructure-vector
                          (fn* [out b v]
                               (let* [vsym (gensym "val__")
                                      ssym (gensym "seq__")
                                      out (conj out vsym v ssym `(seq ~vsym))]
                                 (loop* [out out
                                         s (seq b)
                                         expect-as? nil]
                                        (if s
                                          (cond
                                            (= '& (first s)) (recur (destructure-binding out (second s) ssym)
                                                                    (nnext s)
                                                                    :true)
                                            (= :as (first s)) (destructure-binding out (second s) vsym)
                                            :else (if expect-as?
                                                    (throw (new IllegalArgument "Unsupported binding form, only :as can follow & parameter"))
                                                    (recur (conj (destructure-binding out (first s) `(first ~ssym)) ssym `(next ~ssym))
                                                           (next s)
                                                           nil)))
                                          out))))
                          destructure-map
                          (fn* [out b v]
                               (let* [vsym (gensym "val__")
                                      out (conj out vsym v)
                                      defaults (b :or)
                                      all (b :as)
                                      destructure-locals
                                      (fn* [out key-fn locals]
                                           (reduce (fn* [out sym] (if (symbol? sym)
                                                                    (conj out sym `(get ~vsym ~(key-fn sym) ~(get defaults sym)))
                                                                    (throw (new IllegalArgument (str "Unsupported binding form: " sym)))))
                                                   out
                                                   locals))
                                      out (if all (conj out all vsym) out)
                                      out (destructure-locals out keyword (b :keys))
                                      out (destructure-locals out (fn* [sym] (list 'quote sym)) (b :syms))
                                      out (destructure-locals out name (b :strs))
                                      b (dissoc b :or :as :keys :syms :strs)]
                                 (reduce (fn* [out bk]
                                              (destructure-binding out
                                                                   (first bk)
                                                                   `(get ~vsym ~(second bk) ~(get defaults (first bk)))))
                                         out
                                         b)))]
                     (cond
                       (vector? b) (destructure-vector out b v)
                       (map? b) (destructure-map out b v)
                       (symbol? b) (conj out b v)
                       :else (throw (new IllegalArgument (str "Unsupported binding form: " b))))))
              destructure-binding-pair (fn* [out bv] (destructure-binding out (first bv) (second bv)))]
         (reduce destructure-binding-pair [] pairs))))


(def {:private :true} destructure-fn
  (fn* destructure-fn [body]
       (let* [params (first body)]
         (if (every? symbol? params)
           body
           (loop* [s (seq params)
                   dparams []
                   locals []]
                  (if s
                    (if (symbol? (first s))
                      (recur (next s) (conj dparams (first s)) locals)
                      (let* [p (gensym "p__")]
                        (recur (next s) (conj dparams p) (conj locals (first s) p))))
                    `(~dparams (let ~locals ~@(next body)))))))))


(def {:private :true} prepend-params
  (fn* prepend-params [p b]
    (conj* (rest b) (apply vector (concati p (first b))))))


(def {:private :true} into-do
  (fn* into-do
       ([body]
        (into-do body nil))
       ([body eparams]
        (destructure-fn
         (prepend-params
          eparams
          (if (nnext body)
            (list (first body) (conj* (next body) 'do))
            body))))))


(def {:private :true} arglists*
  (fn* [decl]
       (list 'quote
             (if (isa? (type (first decl)) cleo.core/Sequence)
               (map1 first decl)
               (list (first decl))))))


(def {:private :true} parse-fdecl-meta
  (fn* parse-fdecl-meta [decl]
       (let* [m (if (string? (first decl)) {:doc (first decl)} {})
              decl (if (string? (first decl)) (next decl) decl)
              m (if (map? (first decl)) (merge m (first decl)) m)
              decl (if (map? (first decl)) (next decl) decl)]
         [m decl])))


(def {:macro :true
      :arglists '([name doc-string? attr-map? [params*] body]
                  [name doc-string? attr-map? ([params*] body)+])}
  defmacro
  (fn* defmacro [&form &env name & decl]
       (let* [mdecl (parse-fdecl-meta decl)
              decl (second mdecl)
              m (assoc* (first mdecl) :macro :true)
              m (merge {:arglists (arglists* decl)} m)]
         (list 'def m name (if (vector? (first decl))
                             `(fn* ~name ~@(into-do decl '[&form &env]))
                             `(fn* ~name ~@(map1 (fn* [d] (into-do d '[&form &env])) decl)))))))


(defmacro deftype [name fields]
  `(do
     (def ~name (cleo.core/type* '~name '~fields))
     (defn ~(symbol nil (str "->" name)) ~fields (new ~name ~@fields))
     ~name))


(defmacro defmulti [name dispatch-fn & options]
  (let* [options (apply hash-map options)
         default (options :default :default)]
    `(def ~name (multi* '~(symbol (cleo.core/name (cleo.core/ns-name *ns*)) (cleo.core/name name)) ~dispatch-fn ~default))))


(defmacro defmethod [multi dispatch-val & fn-tail]
  `(defmethod* ~multi ~dispatch-val (fn ~@fn-tail)))


(defmacro fn
  {:special-form :true
   :forms '[(fn name? [params*] exprs*)
            (fn name? ([params*] exprs*)+)]}
  [& decl]
  (let* [name (if (symbol? (first decl)) [(first decl)] [])
         decl (if (symbol? (first decl)) (next decl) decl)]
    (if (vector? (first decl))
      `(fn* ~@name ~@(into-do decl))
      `(fn* ~@name ~@(map1 (fn* [d] (into-do d)) decl)))))


(defmacro defn
  {:arglists '([name doc-string? attr-map? [params*] body]
               [name doc-string? attr-map? ([params*] body)+])}
  [name & decl]
  (let* [mdecl (parse-fdecl-meta decl)
         decl (second mdecl)
         arglists (if (isa? (type (first decl)) cleo.core/Sequence)
                    (map1 first decl)
                    (list (first decl)))
         m (merge {:arglists (arglists* decl)} (first mdecl))]
    `(def ~m ~name (fn ~name ~@decl))))


(defmacro defn-
  {:arglists '([name doc-string? attr-map? [params*] body]
               [name doc-string? attr-map? ([params*] body)+])}
  [name & decl]
  (let* [mdecl (parse-fdecl-meta decl)
         m (assoc* (first mdecl) :private :true)]
    `(defn ~name ~m ~@(second mdecl))))


(defn not [x] (if x nil :true))


(defmacro or
  ([] nil)
  ([x] x)
  ([x & xs] `(let* [x# ~x] (if x# x# (or ~@xs)))))


(defmacro and
  ([] :true)
  ([x] x)
  ([x & xs] `(let* [x# ~x] (if x# (and ~@xs) x#))))


(defn seq? [x] (isa? (type x) cleo.core/Sequence))


(defmacro lazy-seq [& body] `(lazy-seq* (fn* [] (do ~@body))))


(defmacro when [expr & body]
  `(if ~expr (do ~@body)))


(defn dec [x] (- x 1))
(defn inc [x] (+ x 1))
(defn zero? [x] (= 0 x))
(defn pos? [x] (< 0 x))
(defn neg? [x] (< x 0))
(defn int? [x] (identical? (type x) Int64))
(defn even? [x] (zero? (bit-and* x 1)))
(defn odd? [x] (not (even? x)))


(defn not=
  "Equivalent to (not (= x y))"
  [x y] (not (= x y)))


(defn assoc
  ([m k v] (assoc* m k v))
  ([m k v & kvs]
    (let* [m (assoc* m k v)]
      (if kvs
        (if (next kvs)
          (recur m (first kvs) (second kvs) (nnext kvs))
          (throw (new IllegalArgument "assoc expects even number of arguments")))
        m))))


(defmacro let
  {:special-form :true
   :forms '[(let [bindings*] exprs*)]}
  [bindings & body]
  `(let* ~(destructure bindings) ~(if (next body)
                                    (conj* body 'do)
                                    (first body))))


(defn- interleave2 [coll1 coll2]
  (loop* [s1 (seq coll1) s2 (seq coll2) out []]
    (if s1
      (recur (next s1) (next s2) (conj out (first s1) (first s2)))
      out)))

(defn- pairs1 [coll1 coll2]
  (loop* [s1 (seq coll1) s2 (seq coll2) out []]
    (if s1
      (recur (next s1) (next s2) (conj out [(first s1) (first s2)]))
      out)))


(defmacro loop
  {:special-form :true
   :forms '[(loop [bindings*] exprs*)]}
  [bindings & body]
  (let [bvs (partition-kv bindings)
        bs (map1 first bvs)]
    (if (every? symbol? bs)
      `(loop* ~bindings ~(if (next body)
                           (conj* body 'do)
                           (first body)))
      (let [ls (map1 (fn* [p] (if (symbol? p) p (gensym "l__"))) bs)
            lvbls (reduce (fn* [out bvl]
                               (let [[[b v] l] bvl]
                                 (if (symbol? b)
                                   (conj out b v)
                                   (conj out l v b l))))
                          []
                          (pairs1 bvs ls))]
        `(let ~lvbls
           (loop* ~(interleave2 ls ls)
             (let ~(interleave2 bs ls) ~@body)))))))


(defn bit-and
  ([x y] (bit-and* x y))
  ([x y & more]
    (let [val (bit-and* x y)]
      (if more
        (recur val (first more) (next more))
        val))))


(defn bit-or
  ([x y] (bit-or* x y))
  ([x y & more]
    (let [val (bit-or* x y)]
      (if more
        (recur val (first more) (next more))
        val))))


(defn bit-xor
  ([x y] (bit-xor* x y))
  ([x y & more]
    (let [val (bit-xor* x y)]
      (if more
        (recur val (first more) (next more))
        val))))


(defn bit-and-not
  ([x y] (bit-and-not* x y))
  ([x y & more]
    (let [val (bit-and-not* x y)]
      (if more
        (recur val (first more) (next more))
        val))))


(defmacro when-let [bindings & body]
  `(let [val# ~(bindings 1)]
     (if val#
       (let [~(bindings 0) val#] ~@body))))


(defmacro if-let
  ([bindings then] `(if-let ~bindings ~then nil))
  ([bindings then else]
    `(let [val# ~(bindings 1)]
       (if val#
         (let [~(bindings 0) val#] ~then)
         ~else))))


(defn some [pred coll]
  (when-let [s (seq coll)]
    (or (pred (first s))
        (recur pred (next s)))))


(defn vec [x]
  (if (vector? x)
    x
    (persistent! (reduce conj! (transient []) x))))


(defmacro dotimes [bindings & body]
  (let [[b n] bindings]
    `(let* [n# ~n]
       (loop* [~b 0]
         (if (< ~b n#)
           (do
             ~@body
             (recur (inc ~b))))))))


(defmacro doseq [bindings & body]
  (let [[b s] bindings]
    `(loop* [s# (seq ~s)]
       (if s#
         (let [~b (first s#)]
           ~@body
           (recur (next s#)))))))


(defn map [f coll]
  (lazy-seq
    (when-let [s (seq coll)]
      (cons (f (first s)) (map f (next s))))))


(defn mapv [f coll]
  (loop [s (seq coll)
         out (transient [])]
    (if s
      (recur (next s) (conj! out (f (first s))))
      (persistent! out))))


(defn filter [pred coll]
  (lazy-seq
    (when-let [s (seq coll)]
      (let [v (first s)
            n (next s)]
        (if (pred v)
          (cons v (filter pred n))
          (filter pred n))))))


(defmacro ns
  {:arglists '([name docstring? attr-map? references*])}
  [name & references]
  (let [gen-reference
        (fn [[kind & args]]
          `(~(symbol "cleo.core" (cleo.core/name kind)) ~@(map (fn [arg] `'~arg) args)))
        docstring (if (string? (first references)) (first references))
        references (if docstring (next references) references)
        metadata (if (map? (first references)) (first references))
        references (if metadata (next references) references)
        metadata (if docstring (assoc metadata :doc docstring) metadata)]
    `(do
       (cleo.core/in-ns '~name ~metadata)
       (cleo.core/refer '~'cleo.core)
       ~@(map gen-reference references))))


(defn update [m k f]
  (assoc m k (f (get m k))))


(defn disasm [fn]
  (let [{:keys [name bodies]} (disasm* fn)
        right (fn [w n]
                (loop [n (str n)]
                  (if (< (count n) w)
                    (recur (str " " n))
                    n)))
        left (fn [w n]
               (loop [n (str n)]
                 (if (< (count n) w)
                   (recur (str n " "))
                   n)))]
    (println "fn:" name)
    (doseq [{:keys [arity locals-size bytecode exception-table]} bodies]
      (println "arity:" arity)
      (println "locals size:" locals-size)
      (println "bytecode:")
      (doseq [[offset oc & args] bytecode]
        (println (right 6 offset) (left 5 oc) (if args (pr-str (first args)) "")))
      (when exception-table
        (println "exception table:")
        (println "  start     end handler stacksz type")
        (doseq [{:keys [start-offset end-offset handler-offset stack-size type]} exception-table]
          (println (right 7 start-offset) (right 7 end-offset) (right 7 handler-offset) (right 7 stack-size) type))))))


(defmacro -> [x & forms]
  (loop [forms forms
         out x]
    (if forms
      (let [form (first forms)
            form (if (seq? form)
                   `(~(first form) ~out ~@(next form))
                   (list form out))]
        (recur (next forms) form))
      out)))


(defmacro ->> [x & forms]
  (loop [forms forms
         out x]
    (if forms
      (let [form (first forms)
            form (if (seq? form)
                   `(~@form ~out)
                   (list form out))]
        (recur (next forms) form))
      out)))


(defn print-doc [name {:keys [ns macro doc arglists forms special-form]}]
  (println "--------------------------------")
  (println (str (when ns (str (ns-name ns) "/")) name))
  (cond
    forms (doseq [form forms] (println " " form))
    arglists (println arglists))
  (cond
    special-form (println "Special Form")
    macro (println "Macro"))
  (println " " doc))


(defmacro doc
  "Prints documentation for a var or a namespace"
  [name]
  (cond
    (resolve name) `(print-doc (:name (meta (resolve '~name))) (meta (resolve '~name)))
    (find-ns name) `(print-doc (ns-name (find-ns '~name)) (meta (find-ns '~name)))))
